
import java.io.FileInputStream;
import java.util.List;
import java.util.Scanner;
import javax.swing.JFileChooser;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author webonise
 */
public class DesignClass extends javax.swing.JFrame {
       
        
 
    public DesignClass() {
      
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        parse = new javax.swing.JButton();
        ta1 = new java.awt.TextArea();
        fname = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Ubuntu", 1, 24)); // NOI18N
        jLabel1.setText("File Parser Application");

        parse.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        parse.setText("Parse Me !");
        parse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                parseActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel2.setText("Enter absolute path of File");

        jButton1.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jButton1.setText("Clear");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(230, 230, 230)
                        .addComponent(parse))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(fname, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(159, 159, 159)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(ta1, javax.swing.GroupLayout.PREFERRED_SIZE, 549, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(445, 445, 445)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(52, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addComponent(jLabel1)
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE)
                    .addComponent(fname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(parse)
                .addGap(1, 1, 1)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ta1, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void parseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_parseActionPerformed
      
        int flag=0;  
        if(evt.getSource()==parse)
        {
            try
            {
                
                String file_name=fname.getText();
                Scanner fileTypeCheck=new Scanner(new FileInputStream(file_name));
                StringParse p=new StringParse(); 
         
                 while(fileTypeCheck.hasNext())
                 {
		     String firstword=fileTypeCheck.next();
                     if(firstword.equals("<?php"))
                      { //ta1 is TextArea object.
                       ta1.append("This File is of PHP\n");
                       ta1.append("\nThe Classes in php\n");
                      
                       List<String> classes=p.findPHPClasses(file_name);
                       for(String l:classes)
                       {
                           ta1.append(l);
                           ta1.append("\n");
                       }
                       
                       ta1.append("\n The mehtods in php\n");
                       
                       List<String> methods=p.findPhpMethods(file_name);
                       for(String l1:methods)
                       {
                           ta1.append(l1);
                           ta1.append("\n");
                       } 
                       
                        ta1.append("\n The Variables in php\n");
                       
                       List<String> variables=p.findPhpVariables(file_name);
                       for(String l2:variables)
                       {
                           ta1.append(l2);
                           ta1.append("\n");
                       } 
                       
                       ta1.append("\n");
                       boolean tag=p.isPHPFileIndented(file_name);
                       if(tag)
                           ta1.append("\nThe PHP file is Indented\n");
                       else
                           ta1.append("\nThe PHP file is not Indented");
                            
                       flag=1;
                       fileTypeCheck.close();
                       break;                      
                      }
                      if(firstword.contains("import")|| firstword.contains("public static void main"))
                      {
                           ta1.append("This File is of JAVA\n");
                           fileTypeCheck.close();
                                                 
                           ta1.append("The classes in java file are\n\n");
                      
                       List<String> classes=p.findJavaClasses(file_name);
                       for(String l:classes)
                       {
                           ta1.append(l);
                           ta1.append("\n");
                       }
                       
                       
                       
                       ta1.append("\n\n");
                       List<String> methods=p.findJavaMethods(file_name);                   
                       ta1.append("The Methods in java file are\n\n");
                       for(String l1:methods)
                       {
                           ta1.append(l1);
                           ta1.append("\n");
                       }                 
                    
                       ta1.append("\n\n");
                       List<String> variables=p.findJavaVariables(file_name);
                       ta1.append("The Variables in java are\n\n");
                       
                     for(String l2:variables)
                       {
                           ta1.append(l2);
                           ta1.append("\n");
                       }
                     ta1.append("\n\n");
                     boolean tag=p.isFileIndented(file_name);
                      if(tag)
                      {
                          ta1.append("\nThe File is indented correctly...\n");
                      }
                      else
                      {
                          ta1.append("\nThe File is not indented correctly..\n");
                      }
                       
                          flag=1;
                         break;
                      }
                      if(firstword.contains("def")||firstword.contains("end"))
                      {
                          ta1.append("This Program is wriiten in Ruby\n\n");
                            fileTypeCheck.close();
                            
                              ta1.append("The classes in Ruby file are\n\n");
                      
                       List<String> classes=p.findJavaClasses(file_name);
                       for(String l:classes)
                       {
                           ta1.append(l);
                           ta1.append("\n");
                       }
                          ta1.append("\n The Ruby methods are\n");
                       List<String> methods=p.findRubyMethods(file_name);
                       for(String l1:methods)
                       {
                           ta1.append(l1);
                           ta1.append("\n");
                       }
                            
                       ta1.append("\n The Ruby variables are\n");
                       List<String> variables=p.findRubyVariables(file_name);
                       for(String l1:variables)
                       {
                           ta1.append(l1);
                           ta1.append("\n");
                       }
                       
                       ta1.append("\n");
                       boolean tag=p.isPHPFileIndented(file_name);
                       if(tag)
                           ta1.append("\nThe Ruby file is Indented\n");
                       else
                           ta1.append("\nThe Ruby file is not Indented");
                       
                          flag=1;
                          break;
                      }
                      
                      
                }
               if(flag==0)
               {
                   ta1.append("Other Files\n");
                    fileTypeCheck.close();
               }
              
                
            }catch(Exception e)
            {
                 System.out.println(e);
                ta1.append("File Handling Error\n");
            }
            
            }        
        
        
        
        
        
        
    }//GEN-LAST:event_parseActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
      if(evt.getSource()==jButton1)
      {
        ta1.setText(null);
      }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DesignClass.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DesignClass.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DesignClass.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DesignClass.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DesignClass().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField fname;
    private javax.swing.JButton jButton1;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton parse;
    private java.awt.TextArea ta1;
    // End of variables declaration//GEN-END:variables
}
